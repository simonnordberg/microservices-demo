syntax = "proto3";

package demoshop;
option go_package = "simonnordberg.com/demoshop/protos";

// Runtime service
service RuntimeService {
  rpc GetEnvironment(Empty) returns (Environment) {}
}

message Environment {
  map<string, string> variables = 1;
}

// Cart
service CartService {
  rpc AddItem(AddItemRequest) returns (Empty) {}
  rpc GetCart(GetCartRequest) returns (Cart) {}
  rpc EmptyCart(EmptyCartRequest) returns (Empty) {}
}

message CartItem {
  string product_id = 1;
  int32  quantity = 2;
}

message AddItemRequest {
  string user_id = 1;
  CartItem item = 2;
}

message EmptyCartRequest {
  string user_id = 1;
}

message GetCartRequest {
  string user_id = 1;
}

message Cart {
  string user_id = 1;
  repeated CartItem items = 2;
}

message Empty {}

// Products
service ProductCatalogService {
  rpc ListProducts(Empty) returns (ListProductsResponse) {}
  rpc GetProduct(GetProductRequest) returns (Product) {}
  rpc SearchProducts(SearchProductsRequest) returns (SearchProductsResponse) {}
}

message Product {
  string id = 1;
  string name = 2;
  string description = 3;
  string picture = 4;
  Money price_usd = 5;
  repeated string categories = 6;
}

message ListProductsResponse {
  repeated Product products = 1;
}

message GetProductRequest {
  string id = 1;
}

message SearchProductsRequest {
  string query = 1;
}

message SearchProductsResponse {
  repeated Product results = 1;
}

// Currency
service CurrencyService {
  rpc GetSupportedCurrencies(Empty) returns (GetSupportedCurrenciesResponse) {}
  rpc Convert(CurrencyConversionRequest) returns (Money) {}
}

message Money {
  // The 3-letter currency code defined in ISO 4217.
  string currency_code = 1;

  // The whole units of the amount.
  // For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
  int64 units = 2;

  // Number of nano (10^-9) units of the amount.
  // The value must be between -999,999,999 and +999,999,999 inclusive.
  // If `units` is positive, `nanos` must be positive or zero.
  // If `units` is zero, `nanos` can be positive, zero, or negative.
  // If `units` is negative, `nanos` must be negative or zero.
  // For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
  int32 nanos = 3;
}

message GetSupportedCurrenciesResponse {
  // The 3-letter currency code defined in ISO 4217.
  repeated string currency_codes = 1;
}

message CurrencyConversionRequest {
  Money from = 1;

  // The 3-letter currency code defined in ISO 4217.
  string to_code = 2;
}
